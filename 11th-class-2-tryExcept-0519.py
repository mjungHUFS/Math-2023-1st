# 오류(error) : ====================================================
# a. 프로그램 실행 전에 발생하는 오류 => 구문오류 => 프로그램 자체가 실행되지 않음
# b. 프로그램 실행 후에 발생하는 오류 => 예외(except)/런타임오류
print('프로그램이 시작되었습니다!')
#list_a[1]
#예외 해결


#======================================================
# 예외를 처리하는 방법: 조건문을 사용 또는 try 구문 사용
# 조건문 사용:
user_input = input('정수입력:')
num_input = int(user_input)
print('원의 둘레:', 2*3.14*num_input)

user_input = input('정수입력:')

  
#=======================================================
# 프로그램을 작성할때 항상 예외적인 상황까지 모두 생각하는 게 좋음 
# 조건문처럼 예외가 발생할 모든 상황을 예측하기 쉽지 않음
# => try/ except 구문을 사용!
# try:
#   예외가 발생할 가능성이 있는 코드
# except:
#   예외가 발생했을 때 실행할 코드
#========================================================


# try:
#   예외가 발생할 가능성이 있는 코드
# except:
#   예외가 발생했을 때 실행할 코드
# else:
#  예외가 발생하지 않았을때 실행할 코드 


# try:
#   예외가 발생할 가능성이 있는 코드
# except:
#   예외가 발생했을 때 실행할 코드
# else:
#  예외가 발생하지 않았을때 실행할 코드 
# finally:
# 무조건 실행할 코드



#=========================================================
# try:
#   예외가 발생할 가능성이 있는 코드
# except 예외의 종류 as 변수:
#   예회가 발생했을 때 실행할 구문
#=========================================================

# <class 'ValueError'> invalid literal for int() with base 10: '3.4'

# 예제 -----------------------
list_num = [52, 34, 31,100]


#정수입력:3.14
#<class 'ValueError'> invalid literal for int() with base 10: '3.14'
#정수입력:5
#<class 'IndexError'> list index out of range

#--------------------------
list_num = [52, 34, 31,100]


#--------------------------
list_num = [52, 34, 31,100]


#==================================
# try except 구문 & 함수
#==================================
def divide_exception(a, b):

divide_exception(1, 0)

#----------------------------------
def write_file(filename, text):

write.file('test.txt', 안녕하세요)



#===============================================
# try except 구문 & pass
#===============================================
list_input = ['52', '273', '32','스파이','103']


print(list_num) # ['52', '273', '32', '103']

#----------------------------
def divide_exception(a, b):


divide_exception(1, 0)
divide_exception(2, 1)

#===============================================
# 오류 일부러 발생시키기: raise 명령어 사용
#===============================================
def say_nick(nick):


#---------------------------
def say_nick(nick):


#===========================
def three_multiple():



