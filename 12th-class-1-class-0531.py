'''
=============================
class
=============================
## 용어정리
# 객체(object) 속성을 가질 수 있는 모든 것
# 클래스(class) 객체를 쉽고 편리하게 생성하기 위해 만들어진 구문
# 인스턴스 (instance) 클래스를 기반으로 생성한 객체
# 생성자(constructor) 클래스 이름과 같은 인스턴스를 생성할 때 사용하는 함수
# 메소드(method) 클래스가 가진 함수
'''
# 하나의 계산기
def add(num):
 

print(add(3)) # 3
print(add(4)) # 7 (앞의 영향을 받음)


# 두 개의 계산기 
def add1(num):


def add2(num):
 

print(add1(3)) # 3
print(add1(4)) # 7
print(add2(3)) # 3
print(add2(7)) # 10
print()

#==================================
# class:과자틀, object(객체): 과자 
# class => 두개의 계산기 생성 가능
#===================================
class Calculator:



print()

#==================================
## class 구조 만들기
#===================================
# 객체 생산 
class FourCal:





print()

# 더하기 기능 추가 
class FourCal:

print()

# Exercise =====================================
# 곱하기(mul), 빼기(sub), 나누기(div) 함수추가 

class FourCal:





print()
#================================================


#==============================
## 생성자(constructor) 만들기
#==============================
# setdata 메서드를 수행하지 않으면 error 발생
# b=FourCal()
# b.add()

# 생성자: 객체가 생성될 때 자동으로 호출되는 메서드 (초깃값 설정)
class FourCal:


#a= FourCal() # error 발생, first, second의 초깃값이 없으므로


#================================
## 클래스의 상속:
## 기존 클래스를 변경하지 않고 기능을 추가하거나 기존 기능을 변경하고자 할때 사용
#================================

# 클래스의 상속
class MoreFourCal(FourCal):


# 기능 추가 
class MoreFourCal(FourCal):


# 기존기능 변경
class SafeFourCal(FourCal):


# 클래스 변수 (객체와 상관없이 항상 똑같다)
class Family:



## 다른예제 =======================================================================


## 해결방법 1: 부모 클래스의 속성을 생성하고 초기화시켜주기 위해서는 Family 클래스의 __init__ 메서드를 호출해야 하는데,
## 이는 super()라는 함수를 이용해주어야 함


print(a.lastname) # 홍
print(b.lastname) # 홍

## 해결방법2: 자식 클래스에 __init__ 메서드가 생략되었다면 자동으로 부모 클래스의 __init__ 메서드가 호출


print(a.lastname) # 홍
print(b.lastname) # 홍
print(b.firstname) #길동

## 메서드 오버라이딩(Method Overriding) ==================================================================
# 부모 클래스에 선언된 메서드와 동일한 이름의 메서드를 자식 클래스에도 선언하여, 메서드를 덮어 씌우는 기능



a.introduce() # 저희는 가족입니다.
b.introduce() # 저희는 가족입니다.

## 예제 1: 자식 클래스에 동일한 이름의 메서드를 생성하면 부모 클래스의 메서드는 무시되고 자식 클래스의 메서드가 호출


a.introduce() # 저희는 가족입니다.
b.introduce() # 저는 가족의 구성원입니다.

## 예제 2: 오버라이딩을 한 후에, 부모 클래스의 메서드를 호출하고 싶다면 마찬가지로 super() 함수를 이용


a.introduce() # 저희는 가족입니다.
b.introduce() # 저희는 가족입니다. 
              # 저는 가족의 구성원입니다.


